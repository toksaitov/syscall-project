name: Build and Test Part 2 for amd64

on: [push, workflow_dispatch]

jobs:
  build-and-test:
    runs-on: ubuntu-24.04
    timeout-minutes: 5
    defaults:
      run:
        shell: bash

    steps:
    - uses: actions/checkout@v4

    - name: Install Utilities and Compilers
      run: |
        # Install utilities and GCC
        sudo apt update
        sudo apt install -y strace
        sudo apt install -y make gcc-x86-64-linux-gnu

    - name: Test if the 'ish' Directory is Present
      run: |
        # Check 'ish'
        if [ ! -d 'ish' ]
        then
          echo -e "The 'ish' directory is missing."
          exit 1
        fi

    - name: Test if the Main File is Present and Correct
      working-directory: ${{github.workspace}}/ish
      run: |
        # Check ish.c
        if [ ! -f 'ish.c' ]
        then
          echo -e "The 'ish.c' file is missing."
          exit 1
        fi
        HASH_OUTPUT="$(sha256sum 'ish.c')"
        CORRECT_HASH_OUTPUT='823e2ff5addcbb8349fa2043a205e3a844c1c73f35942b098fd8a1f653af8e99  ish.c'
        if [ "$HASH_OUTPUT" != "$CORRECT_HASH_OUTPUT" ]
        then
          echo -e "The 'ish.c' file was modified. Restore it to the original state."
          exit 1
        fi

    - name: Test if the Files with System Calls are Present
      working-directory: ${{github.workspace}}/ish
      run: |
        # Check 'ish_syscalls.amd64.c'
        if [ ! -f 'ish_syscalls.amd64.c' ]
        then
          echo -e "The 'ish_syscalls.amd64.c' file is missing in 'ish/'."
          exit 1
        fi

    - name: Test if the Makefile is Present and Correct
      working-directory: ${{github.workspace}}/ish
      run: |
        # Check Makefile
        if [ ! -f 'Makefile' ]
        then
          echo -e 'The Makefile file is missing.'
          exit 1
        fi
        HASH_OUTPUT="$(sha256sum 'Makefile')"
        CORRECT_HASH_OUTPUT='f5c0ac995af5c0efaa1ea6208ef5ff38321c7b212807f36c657cfab1e23676c4  Makefile'
        if [ "$HASH_OUTPUT" != "$CORRECT_HASH_OUTPUT" ]
        then
          echo -e "The Makefile file is incorrect. Have you removed '-D ISH_USE_STDLIB' from it?"
          exit 1
        fi

    - name: Compile the amd64 Variant
      working-directory: ${{github.workspace}}/ish
      run: |
        # Build
        make clean
        CC=x86_64-linux-gnu-gcc make

        if [ ! -f ./ish ]
        then
          echo -e "The 'ish' executable was not generated."
          exit 1
        fi

    - name: Run and Test the `read` System Call With the amd64 Shell Variant
      working-directory: ${{github.workspace}}/ish
      run: |
        # Run and Test
        OUTPUT="$(echo 'hi' | strace -q './ish' 2>&1 1>/dev/null)"
        if [ $? -ne 0 ]
        then
          echo -e "The program 'ish' failed to run successfully."
          exit 1
        fi

        read -r -d '' CORRECT_OUTPUT <<-'EOF' || true
        read(0, "hi\n", 255
        EOF

        if ! grep --fixed-strings --quiet "$CORRECT_OUTPUT" <(echo "$OUTPUT")
        then
          echo -e "The program 'ish' failed to correctly issue the 'read' system call."
          exit 1
        fi

        echo -e "The program 'ish' successfully made the 'read' system call."

    - name: Run and Test the `chdir` System Call With the amd64 Shell Variant
      working-directory: ${{github.workspace}}/ish
      run: |
        # Run and Test
        OUTPUT="$(echo 'cd /bin' | strace -q './ish' 2>&1 1>/dev/null)"
        if [ $? -ne 0 ]
        then
          echo -e "The program 'ish' failed to run successfully."
          exit 1
        fi

        read -r -d '' CORRECT_OUTPUT <<-'EOF' || true
        chdir("/bin"
        EOF

        if ! grep --fixed-strings --quiet "$CORRECT_OUTPUT" <(echo "$OUTPUT")
        then
          echo -e "The program 'ish' failed to correctly issue the 'chdir' system call."
          exit 1
        fi

        echo -e "The program 'ish' successfully made the 'chdir' system call."

    - name: Run and Test the `exit` System Call With the amd64 Shell Variant
      working-directory: ${{github.workspace}}/ish
      run: |
        # Run and Test
        set +e
        OUTPUT="$(echo 'exit 42' | strace -q './ish' 2>&1 1>/dev/null)"
        ISH_EXIT_CODE=$?
        set -e
        if [ "$ISH_EXIT_CODE" -ne 42 ]
        then
          echo -e "The program 'ish' failed to run successfully."
          exit 1
        fi

        read -r -d '' CORRECT_OUTPUT <<-'EOF' || true
        exit(42
        EOF

        if ! grep --fixed-strings --quiet "$CORRECT_OUTPUT" <(echo "$OUTPUT")
        then
          echo -e "The program 'ish' failed to correctly issue the 'exit' system call."
          exit 1
        fi

        echo -e "The program 'ish' successfully made the 'exit' system call."

    - name: Run and Test the `stat`, `fork`, `execve`, and `waitpid` System Calls With the amd64 Shell Variant
      working-directory: ${{github.workspace}}/ish
      run: |
        # Run and Test
        OUTPUT="$(echo 'ls' | strace -q -f './ish' 2>&1 1>/dev/null)"
        if [ $? -ne 0 ]
        then
          echo -e "The program 'ish' failed to run successfully."
          exit 1
        fi

        read -r -d '' CORRECT_OUTPUT1 <<-'EOF' || true
        stat("/usr/bin/ls", {st_mode=S_IFREG|0755
        EOF

        if ! grep --fixed-strings --quiet "$CORRECT_OUTPUT1" <(echo "$OUTPUT")
        then
          echo -e "The program 'ish' failed to correctly issue the 'stat' system call."
          exit 1
        fi

        read -r -d '' CORRECT_OUTPUT2 <<-'EOF' || true
        fork(
        EOF

        if ! grep --fixed-strings --quiet "$CORRECT_OUTPUT2" <(echo "$OUTPUT")
        then
          echo -e "The program 'ish' failed to correctly issue the 'fork' system call."
          exit 1
        fi

        read -r -d '' CORRECT_OUTPUT3 <<-'EOF' || true
        execve("/usr/bin/ls", ["ls"],
        EOF

        if ! grep --fixed-strings --quiet "$CORRECT_OUTPUT3" <(echo "$OUTPUT")
        then
          echo -e "The program 'ish' failed to correctly issue the 'execve' system call."
          exit 1
        fi

        read -r -d '' CORRECT_OUTPUT4 <<-'EOF' || true
        wait4(
        EOF

        if ! grep --fixed-strings --quiet "$CORRECT_OUTPUT4" <(echo "$OUTPUT")
        then
          echo -e "The program 'ish' failed to correctly issue the 'wait' system call."
          exit 1
        fi

        echo -e "The program 'ish' successfully made the 'stat', 'fork', 'execve', and 'waitpid' system calls."

    - name: Run and Test the `open`, `creat`, `dup2`, and `close` System Calls With the amd64 Shell Variant
      working-directory: ${{github.workspace}}/ish
      run: |
        # Run and Test
        rm -f 'hi.txt'
        OUTPUT="$(echo 'echo hi > hi.txt' | strace -q -f './ish' 2>&1 1>/dev/null)"
        if [ $? -ne 0 ]
        then
          echo -e "The program 'ish' failed to run successfully."
          exit 1
        fi

        read -r -d '' CORRECT_OUTPUT1 <<-'EOF' || true
        creat("hi.txt", 0644
        EOF

        if ! grep --fixed-strings --quiet "$CORRECT_OUTPUT1" <(echo "$OUTPUT")
        then
          echo -e "The program 'ish' failed to correctly issue the 'creat' system call."
          exit 1
        fi

        read -r -d '' CORRECT_OUTPUT2 <<-'EOF' || true
        dup2(3, 1
        EOF

        if ! grep --fixed-strings --quiet "$CORRECT_OUTPUT2" <(echo "$OUTPUT")
        then
          echo -e "The program 'ish' failed to correctly issue the 'dup2' system call."
          exit 1
        fi

        read -r -d '' CORRECT_OUTPUT3 <<-'EOF' || true
        close(3
        EOF

        if ! grep --fixed-strings --quiet "$CORRECT_OUTPUT3" <(echo "$OUTPUT")
        then
          echo -e "The program 'ish' failed to correctly issue the 'close' system call."
          exit 1
        fi

        OUTPUT="$(echo 'cat < hi.txt' | strace -q -f './ish' 2>&1 1>/dev/null)"
        if [ $? -ne 0 ]
        then
          echo -e "The program 'ish' failed to run successfully."
          exit 1
        fi

        read -r -d '' CORRECT_OUTPUT4 <<-'EOF' || true
        open("hi.txt", O_RDONLY
        EOF

        if ! grep --fixed-strings --quiet "$CORRECT_OUTPUT4" <(echo "$OUTPUT")
        then
          echo -e "The program 'ish' failed to correctly issue the 'open' system call."
          exit 1
        fi

        read -r -d '' CORRECT_OUTPUT5 <<-'EOF' || true
        dup2(3, 0
        EOF

        if ! grep --fixed-strings --quiet "$CORRECT_OUTPUT5" <(echo "$OUTPUT")
        then
          echo -e "The program 'ish' failed to correctly issue the 'dup2' system call."
          exit 1
        fi

        echo -e "The program 'ish' successfully made the 'open', 'creat', 'dup2', and 'close' system calls."

